version: '3.8'

services:
  # ViewTrendsSL API Service
  api:
    build:
      context: ../../..
      dockerfile: config/docker/production/Dockerfile.prod
    container_name: viewtrendssl_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://viewtrendssl:${DB_PASSWORD}@db:5432/viewtrendssl_prod
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - LOG_LEVEL=INFO
      - WORKERS=4
    volumes:
      - ../../../data:/app/data
      - ../../../models:/app/models
      - ../../../logs:/app/logs
      - ../../../reports:/app/reports
    depends_on:
      - db
      - redis
    networks:
      - viewtrendssl_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: viewtrendssl_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=viewtrendssl_prod
      - POSTGRES_USER=viewtrendssl
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../../scripts/database/setup:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - viewtrendssl_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U viewtrendssl -d viewtrendssl_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: viewtrendssl_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - viewtrendssl_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: viewtrendssl_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ../../../logs/nginx:/var/log/nginx
    depends_on:
      - api
    networks:
      - viewtrendssl_network
    profiles:
      - nginx

  # Data Collection Service
  data_collector:
    build:
      context: ../../..
      dockerfile: config/docker/production/Dockerfile.prod
    container_name: viewtrendssl_collector
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://viewtrendssl:${DB_PASSWORD}@db:5432/viewtrendssl_prod
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ../../../data:/app/data
      - ../../../logs:/app/logs
      - ../../../scripts:/app/scripts
    depends_on:
      - db
    networks:
      - viewtrendssl_network
    command: ["python", "-m", "scripts.data_collection.orchestrator", "--production"]
    profiles:
      - data-collection

  # Model Training Service
  model_trainer:
    build:
      context: ../../..
      dockerfile: config/docker/production/Dockerfile.prod
    container_name: viewtrendssl_trainer
    restart: "no"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://viewtrendssl:${DB_PASSWORD}@db:5432/viewtrendssl_prod
      - LOG_LEVEL=INFO
    volumes:
      - ../../../data:/app/data
      - ../../../models:/app/models
      - ../../../logs:/app/logs
      - ../../../reports:/app/reports
    depends_on:
      - db
    networks:
      - viewtrendssl_network
    command: ["python", "-m", "scripts.training.train_models", "--save-models", "--generate-report"]
    profiles:
      - training

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: viewtrendssl_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - viewtrendssl_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: viewtrendssl_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - viewtrendssl_network
    profiles:
      - monitoring

# Networks
networks:
  viewtrendssl_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Environment file template
# Create a .env file in the same directory with these variables:
# DB_PASSWORD=your_secure_db_password
# REDIS_PASSWORD=your_secure_redis_password
# SECRET_KEY=your_flask_secret_key
# JWT_SECRET_KEY=your_jwt_secret_key
# YOUTUBE_API_KEY=your_youtube_api_key
# GRAFANA_PASSWORD=your_grafana_password
# CORS_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
